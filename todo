REMOVE
Includers (collapse into helpers)


Distro = Change to Extension and Data Layers

* * * * Extension Layer  * * * *

Selection of Components, Modules, Themes, Views (Page, Template, and Wrap) and Helpers

* * * * Configuration Layer * * * *

Configuration, XML files, Media, Site

* * * * Application Layer  * * * *
From this point down, you should not see any use of extension type nouns (for example, module)

Logic Flow:
index.php (autoexec/namespaces)
Initialisation
Route
Authorisation
Execute: Action =>MC
-or-
Execute: Display =>MVC
Response
Cleanup

* * * * Event Layer * * * *

Events are registered with the Events Service.

Only the Application and Controller processes can fire events

Extensions schedule events to participate
Services::Event()->schedule('OnBeforeSave')

Triggers register for scheduled events.
Services::Event()->schedule('OnBeforeSave')

The Application and Controller classes notify the Event Manager at Event Time
Services::Event()->notify('OnBeforeSave')

The Event Service triggers those registered
Services::Event()->trigger('OnBeforeSave')

Typically, triggers interact with Services which interfaces to the Utility layer:
- Services::Mail()->Send
- Services::Filter()->text
- Services::Model()->getItems

* * * * Services Layer (Middleware) * * * *

Services::Name()->action('Parameters'):

The Molajo API: common interface that provides a DMZ in a sense to underlying change

Important: Services::Registry()->get('Namespace', 'Parameter')

Question: Helper for distro layer -- should it have a service?

Asset Service -
Specific focus on JS and CSS; interface with minimizers, etc.
Remove all specifically coded paths from code - instead use the Asset Manager API
No Services::Filesystem anywhere but the AssetService (Also, see Model)
Same for views
Bring in the php spl priority

Login - authenticaiton as a service - interfaces to the controller action -
but no specific model or controller for it.

* * * * Model Service * * * *

Only interface to Models should go thru this the ModelService
-- It should look for overrides, etc.
-- It should replace TableModel
-- Instead of having a Head and Message and Request Model, abstract out the data access
element and create a "DBO" of sorts to those types of data.
-- Same for media (files - including CSS, JS, Images, and so forth)
-- Models remaining: Model (base), Item (crud), and Display (list)
-- All customization, editing, and so forth, defined with Table XML and Triggers


* * * * Utility Layer  * * * *

Commodity software, includeing such elements as mail, session management, cookies, request, response,
caching, logging, filesystem interaction including image maniutlation, classes that deal with
webservices, such as twitter, DB interaction.

The only layer that should ever interact with the Utility layer is the Services Layer. That way,
if a faster caching environment was found or a better session management approach, the
change can be as transparent as possible to the application.

Installer





STANDARDS

1. Use registry to locate XML configuration files - don't directly load in the app
Only use $xml = Services::Registry()->loadFile('Users', 'Table');
If it's before dependencies have loaded, document.


 TODO:
 Tables configuration - figure out how to extend them
